// <auto-generated />
using System;
using Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TourTradeDbContext))]
    [Migration("20250827114330_initDataBase")]
    partial class initDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Infrastructure.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart_Item");
                });

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Infrastructure.Models.CategoryLocalized", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Category_Localized");
                });

            modelBuilder.Entity("Infrastructure.Models.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AddresId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Infrastructure.Models.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Infrastructure.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("Infrastructure.Models.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follower");
                });

            modelBuilder.Entity("Infrastructure.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Infrastructure.Models.LocalizedRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RegionId");

                    b.ToTable("LocalizedRegion");
                });

            modelBuilder.Entity("Infrastructure.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Infrastructure.Models.LocationLocalized", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationId");

                    b.ToTable("Location_Localized");
                });

            modelBuilder.Entity("Infrastructure.Models.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Media_Type");
                });

            modelBuilder.Entity("Infrastructure.Models.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Media_Type_Id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .HasColumnName("URL")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Infrastructure.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_Message_Code")
                        .IsUnique();

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Infrastructure.Models.MessageLocalized", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "MessageId", "LanguageId" }, "IX_MessageLocalized_MessageId_LanguageId")
                        .IsUnique();

                    b.ToTable("Message_Localized");
                });

            modelBuilder.Entity("Infrastructure.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("OrderActivity");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Order_Item");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItemActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("OrderItemStatusId");

                    b.ToTable("OrderItemActivity");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("OrderItemStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Infrastructure.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .IsFixedLength();

                    b.Property<int?>("NumberOfReactions")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Infrastructure.Models.PostLocalized", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DescriptionLocalized")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .HasColumnName("Description_Localized")
                        .IsFixedLength();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("Language_Id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("Post_Id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PostId");

                    b.ToTable("Post_Localized");
                });

            modelBuilder.Entity("Infrastructure.Models.PostMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("Media_Id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("Post_Id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("PostId");

                    b.ToTable("Post_Medias");
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .IsFixedLength();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategoryLocalized", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DecriptionLocalized")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .HasColumnName("Decription_Localized")
                        .IsFixedLength();

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("NameLocalized")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Name_Localized")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ProductCategory_Localized");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductLocalized", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DescriptionLocalized")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .HasColumnName("Description_Localized")
                        .IsFixedLength();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("Language_Id");

                    b.Property<string>("NameLocalized")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Name_Localized")
                        .IsFixedLength();

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Localized");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("Media_Id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Medias");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductPost", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.ToTable("Product_Post");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductsPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Products_Post");
                });

            modelBuilder.Entity("Infrastructure.Models.Provider", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Infrastructure.Models.ProviderCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderCategories");
                });

            modelBuilder.Entity("Infrastructure.Models.ProviderEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Provider_Employees");
                });

            modelBuilder.Entity("Infrastructure.Models.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("Infrastructure.Models.ReactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ReactionType");
                });

            modelBuilder.Entity("Infrastructure.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permissions");
                });

            modelBuilder.Entity("Infrastructure.Models.Story", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExipreDate")
                        .HasColumnType("datetime");

                    b.HasKey("PostId");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Infrastructure.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Infrastructure.Models.Cart", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.CartItem", b =>
                {
                    b.HasOne("Infrastructure.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Item_Cart");

                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithMany("CartItems")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Item_Post");

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Item_Product");

                    b.Navigation("Cart");

                    b.Navigation("Post");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.HasOne("Infrastructure.Models.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Infrastructure.Models.CategoryLocalized", b =>
                {
                    b.HasOne("Infrastructure.Models.Category", "Category")
                        .WithMany("CategoryLocalizeds")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Category_Localized_Category");

                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("CategoryLocalizeds")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Category_Localized_Language");

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infrastructure.Models.Customer", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Infrastructure.Models.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Employee", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Infrastructure.Models.Employee", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Favorite", b =>
                {
                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Favorite_Product");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Favorite_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Follower", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "FollowerNavigation")
                        .WithMany("FollowerFollowerNavigations")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_User");

                    b.HasOne("Infrastructure.Models.User", "Following")
                        .WithMany("FollowerFollowings")
                        .HasForeignKey("FollowingId")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_User1");

                    b.Navigation("FollowerNavigation");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Infrastructure.Models.LocalizedRegion", b =>
                {
                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("LocalizedRegions")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_LocalizedRegion_Language");

                    b.HasOne("Infrastructure.Models.Region", "Region")
                        .WithMany("LocalizedRegions")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK_LocalizedRegion_Region");

                    b.Navigation("Language");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Infrastructure.Models.Location", b =>
                {
                    b.HasOne("Infrastructure.Models.Region", "Region")
                        .WithMany("Locations")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Location_Region");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Infrastructure.Models.LocationLocalized", b =>
                {
                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("LocationLocalizeds")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_Localized_Language");

                    b.HasOne("Infrastructure.Models.Location", "Location")
                        .WithMany("LocationLocalizeds")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_Localized_Location");

                    b.Navigation("Language");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Infrastructure.Models.Medium", b =>
                {
                    b.HasOne("Infrastructure.Models.MediaType", "MediaType")
                        .WithMany("Media")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Media_Media_Type");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Infrastructure.Models.MessageLocalized", b =>
                {
                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("MessageLocalizeds")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_MessageLocalized_Language");

                    b.HasOne("Infrastructure.Models.Message", "Message")
                        .WithMany("MessageLocalizeds")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("FK_MessageLocalized_Message");

                    b.Navigation("Language");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Infrastructure.Models.Order", b =>
                {
                    b.HasOne("Infrastructure.Models.Location", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Location");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderActivity", b =>
                {
                    b.HasOne("Infrastructure.Models.Order", "Order")
                        .WithMany("OrderActivities")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderActivity_Order");

                    b.HasOne("Infrastructure.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderActivities")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderActivity_OrderStatus");

                    b.Navigation("Order");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItem", b =>
                {
                    b.HasOne("Infrastructure.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Item_Order");

                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithMany("OrderItems")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Order_Item_Post");

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Item_Product");

                    b.HasOne("Infrastructure.Models.Provider", "Provider")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Item_Provider");

                    b.Navigation("Order");

                    b.Navigation("Post");

                    b.Navigation("Product");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItemActivity", b =>
                {
                    b.HasOne("Infrastructure.Models.OrderItem", "OrderItem")
                        .WithMany("OrderItemActivities")
                        .HasForeignKey("OrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItemActivity_Order_Item");

                    b.HasOne("Infrastructure.Models.OrderItemStatus", "OrderItemStatus")
                        .WithMany("OrderItemActivities")
                        .HasForeignKey("OrderItemStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItemActivity_OrderItemStatus");

                    b.Navigation("OrderItem");

                    b.Navigation("OrderItemStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.Post", b =>
                {
                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.PostLocalized", b =>
                {
                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("PostLocalizeds")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_Localized_Language");

                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithMany("PostLocalizeds")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_Localized_Post");

                    b.Navigation("Language");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Infrastructure.Models.PostMedia", b =>
                {
                    b.HasOne("Infrastructure.Models.Medium", "Media")
                        .WithMany("PostMedia")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_Medias_Media");

                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithMany("PostMedia")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_Medias_Post");

                    b.Navigation("Media");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.HasOne("Infrastructure.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.HasOne("Infrastructure.Models.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Provider");

                    b.Navigation("Category");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategory", b =>
                {
                    b.HasOne("Infrastructure.Models.ProductCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategoryLocalized", b =>
                {
                    b.HasOne("Infrastructure.Models.ProductCategory", "Category")
                        .WithMany("ProductCategoryLocalizeds")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Localized_ProductCategory");

                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("ProductCategoryLocalizeds")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Localized_Language");

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductLocalized", b =>
                {
                    b.HasOne("Infrastructure.Models.Language", "Language")
                        .WithMany("ProductLocalizeds")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Localized_Language");

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("ProductLocalizeds")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Localized_Product");

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductMedia", b =>
                {
                    b.HasOne("Infrastructure.Models.Medium", "Media")
                        .WithMany("ProductMedia")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Medias_Media");

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("ProductMedia")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Medias_Product");

                    b.Navigation("Media");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductPost", b =>
                {
                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Post_Post");

                    b.HasOne("Infrastructure.Models.ProductsPost", "PostNavigation")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Post_Products_Post");

                    b.Navigation("Post");

                    b.Navigation("PostNavigation");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductsPost", b =>
                {
                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("ProductsPosts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Post_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.Provider", b =>
                {
                    b.HasOne("Infrastructure.Models.Provider", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Provider_Provider");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithOne("Provider")
                        .HasForeignKey("Infrastructure.Models.Provider", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Provider_User");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.ProviderCategory", b =>
                {
                    b.HasOne("Infrastructure.Models.Category", "Category")
                        .WithMany("ProviderCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_ProviderCategories_Category");

                    b.HasOne("Infrastructure.Models.Provider", "Provider")
                        .WithMany("ProviderCategories")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_ProviderCategories_Provider");

                    b.Navigation("Category");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Infrastructure.Models.ProviderEmployee", b =>
                {
                    b.HasOne("Infrastructure.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Provider_Employees_Employee");

                    b.HasOne("Infrastructure.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_Provider_Employees_Provider");

                    b.Navigation("Employee");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Infrastructure.Models.Reaction", b =>
                {
                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Reaction_Post");

                    b.HasOne("Infrastructure.Models.ReactionType", "ReactionType")
                        .WithMany("Reactions")
                        .HasForeignKey("ReactionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Reaction_ReactionType");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reaction_User");

                    b.Navigation("Post");

                    b.Navigation("ReactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Region", b =>
                {
                    b.HasOne("Infrastructure.Models.Region", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Region_Region");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Infrastructure.Models.RolePermission", b =>
                {
                    b.HasOne("Infrastructure.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_Permissions_Permission");

                    b.HasOne("Infrastructure.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_Permissions_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.Story", b =>
                {
                    b.HasOne("Infrastructure.Models.Post", "Post")
                        .WithOne("Story")
                        .HasForeignKey("Infrastructure.Models.Story", "PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Story_Post");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.HasOne("Infrastructure.Models.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_User_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Infrastructure.Models.UserRole", b =>
                {
                    b.HasOne("Infrastructure.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Role");

                    b.HasOne("Infrastructure.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.Navigation("CategoryLocalizeds");

                    b.Navigation("InverseParent");

                    b.Navigation("ProviderCategories");
                });

            modelBuilder.Entity("Infrastructure.Models.Language", b =>
                {
                    b.Navigation("CategoryLocalizeds");

                    b.Navigation("LocalizedRegions");

                    b.Navigation("LocationLocalizeds");

                    b.Navigation("MessageLocalizeds");

                    b.Navigation("PostLocalizeds");

                    b.Navigation("ProductCategoryLocalizeds");

                    b.Navigation("ProductLocalizeds");
                });

            modelBuilder.Entity("Infrastructure.Models.Location", b =>
                {
                    b.Navigation("LocationLocalizeds");

                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.MediaType", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Infrastructure.Models.Medium", b =>
                {
                    b.Navigation("PostMedia");

                    b.Navigation("ProductMedia");
                });

            modelBuilder.Entity("Infrastructure.Models.Message", b =>
                {
                    b.Navigation("MessageLocalizeds");
                });

            modelBuilder.Entity("Infrastructure.Models.Order", b =>
                {
                    b.Navigation("OrderActivities");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItem", b =>
                {
                    b.Navigation("OrderItemActivities");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderItemStatus", b =>
                {
                    b.Navigation("OrderItemActivities");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderActivities");
                });

            modelBuilder.Entity("Infrastructure.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Infrastructure.Models.Post", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("PostLocalizeds");

                    b.Navigation("PostMedia");

                    b.Navigation("Reactions");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductLocalizeds");

                    b.Navigation("ProductMedia");

                    b.Navigation("ProductsPosts");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("ProductCategoryLocalizeds");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Infrastructure.Models.Provider", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("OrderItems");

                    b.Navigation("Products");

                    b.Navigation("ProviderCategories");
                });

            modelBuilder.Entity("Infrastructure.Models.ReactionType", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Infrastructure.Models.Region", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("LocalizedRegions");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Infrastructure.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Infrastructure.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Favorites");

                    b.Navigation("FollowerFollowerNavigations");

                    b.Navigation("FollowerFollowings");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("Provider");

                    b.Navigation("Reactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
